{"version":3,"file":"static/js/865.588d3ea9.chunk.js","mappings":"uKAIA,MAAMA,EAAY,mCAEZC,EAAe,oCAIfC,EAAY,IAAIC,gBAAgB,CAElCH,YAAWC,eAAcG,cAHP,SAOTC,EAAoBA,IACjB,GAAAC,OATO,0CASa,KAAAA,OAAIJ,EAAUK,YAKrCC,EAAiBC,UAC5B,MAMMC,EAAS,CACbC,WAAY,qBACZX,UAAWA,EACXC,aAAcA,EACdW,KAAMC,GAKR,aAFkBC,EAAAA,EAAMC,KAfJ,sCAe2BL,EAbhC,CACbM,QAAS,CACP,eAAgB,sDAYIC,KAAKC,YACX,EAGPC,EAA2BV,UACtCW,QAAQC,IAAI,sHAA6BC,GAKzC,aAJkBR,EAAAA,EAAMS,IAAI,GAADjB,OACtBkB,EAAAA,EAAU,gCAAAlB,OAA+BgB,KAGnCL,IAAI,C,4EC3CjB,MAyCA,EAzCuBQ,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MA4BjB,MAAO,CACLC,YA3BiBC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,aA4B5CC,QA1BoD,SAAtCC,eAAeC,QAAQ,WA2BrCC,QAzBc5B,UAAuD,IAAhD,WAAE6B,EAAU,UAAEC,EAAS,OAAEC,EAAM,QAAEC,GAASC,EAI/D,aAHqBd,GACnBe,EAAAA,EAAAA,IAAe,CAAEL,aAAYC,YAAWC,SAAQC,cAEpCG,OAAO,EAsBrBC,SAhBeA,KACfjB,GAASkB,EAAAA,EAAAA,MAAS,EAgBlBC,WAbiBC,IACjBtB,EAAS,CAAEuB,SAAUD,GAAQ,CAAEE,SAAS,GAAO,EAa/CC,YAVkBA,KACXC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACH,SAAO,EAACI,GAAG,kBAU5BC,SAtBepB,eAAeC,QAAQ,YAuBvC,C,uHCnCH,MAkCA,EAlC0BoB,KACtB,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,MAE1C9C,EAAW4C,EAAgBlC,IAAI,QAE/BK,GAAWC,EAAAA,EAAAA,OACX,WAAEkB,IAAetB,EAAAA,EAAAA,KAuBvB,OApBAmC,EAAAA,EAAAA,YAAU,MACRpD,EAAAA,EAAAA,IAAeK,GAAUgD,MAAKvC,IAC5BF,QAAQC,IAAI,eAAgBC,IAE5BH,EAAAA,EAAAA,IAAyBG,GAAauC,MAAKC,IACzC1C,QAAQC,IAAI,uBACZD,QAAQC,IAAIyC,GAEZlC,GAASmC,EAAAA,EAAAA,IAAMD,IAEXA,IAAeA,EAAWE,OAE5BjB,EAAW,UAGXA,EAAW,eACb,GACA,GACF,GACD,CAAClC,KAEFoD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAAKd,EAAAA,EAAAA,KAAA,MAAAc,SAAI,0EACTd,EAAAA,EAAAA,KAAA,OAAAc,SAAMrD,MAAqB,C","sources":["api/login/kakao_api.js","hooks/useCustomLogin.js","pages/login/KakaoRedirectPage.js"],"sourcesContent":["// import axios from \"axios\";\r\nimport axios from \"axios\";\r\nimport { SERVER_URL } from \"../config\";\r\n// 앱 등록시 Rest 키 값(절대 오픈 금지)\r\nconst client_id = \"beae94b18549648a1e9a98b4e0d945b2\";\r\n// 카카오 로그인 통과시 이동할 주소\r\nconst redirect_uri = \"http://localhost:3000/login/kakao\";\r\n// 카카오 로그인 문서 참조\r\nconst auth_code_path = \"https://kauth.kakao.com/oauth/authorize\";\r\nconst response_type = \"code\";\r\nconst authParam = new URLSearchParams({\r\n\r\n    client_id, redirect_uri, response_type\r\n})\r\n\r\n// 카카오 로그인시 활용\r\nexport const getKakaoLoginLink = () => {\r\n  const kakaoURL = `${auth_code_path}?${authParam.toString()}`;\r\n  return kakaoURL;\r\n};\r\n// access 토큰 받기 경로\r\nconst access_token_url = `https://kauth.kakao.com/oauth/token`;\r\nexport const getAccessToken = async authCode => {\r\n  const header = {\r\n    headers: {\r\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    },\r\n  };\r\n\r\n  const params = {\r\n    grant_type: \"authorization_code\",\r\n    client_id: client_id,\r\n    redirect_uri: redirect_uri,\r\n    code: authCode,\r\n  };\r\n\r\n  const res = await axios.post(access_token_url, params, header);\r\n  const accessToken = res.data.access_token;\r\n  return accessToken;\r\n};\r\n// Access Token 으로 회원정보 가져오기\r\nexport const getMemberWithAccessToken = async accessToken => {\r\n  console.log(\"백엔드에 회원 등록을 위한 액세스 토큰 전달 \", accessToken);\r\n  const res = await axios.get(\r\n    `${SERVER_URL}/api/user/kakao?accessToken=${accessToken}`,\r\n  );\r\n\r\n  return res.data;\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\nimport { loginPostAsync, logout } from \"../slices/loginSlice\";\r\n\r\nconst useCustomLogin = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  // RTK 상태값 읽기\r\n  const loginState = useSelector(state => state.loginSlice);\r\n  // 로그인 상태값 파악\r\n  const isLogin = sessionStorage.getItem(\"isLogin\") === \"true\";\r\n  // 로그인 기능\r\n  const doLogin = async ({ loginParam, successFn, failFn, errorFn }) => {\r\n    const action = await dispatch(\r\n      loginPostAsync({ loginParam, successFn, failFn, errorFn }),\r\n    );\r\n    return action.payload;\r\n  };\r\n  // 일반유저 vs 관리자\r\n  const userAuth = sessionStorage.getItem(\"userAuth\");\r\n\r\n  // 로그아웃 기능\r\n  const doLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  // 패스이동 기능\r\n  const moveToPath = path => {\r\n    navigate({ pathname: path }, { replace: true });\r\n  };\r\n  // 로그인 페이지 이동 기능\r\n  const moveToLogin = () => {\r\n    return <Navigate replace to=\"/member/login\" />;\r\n  };\r\n\r\n  return {\r\n    loginState,\r\n    isLogin,\r\n    doLogin,\r\n    doLogout,\r\n    moveToPath,\r\n    moveToLogin,\r\n    userAuth,\r\n  };\r\n};\r\n\r\nexport default useCustomLogin;\r\n","import React, { useEffect } from 'react'\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { getAccessToken, getMemberWithAccessToken } from '../../api/login/kakao_api';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../../slices/loginSlice';\r\nimport useCustomLogin from '../../hooks/useCustomLogin';\r\n\r\nconst KakaoRedirectPage = () => {\r\n    const [uRLSearchParams, setURLSearchParams] = useSearchParams();\r\n  // 인증코드 파악하기\r\n  const authCode = uRLSearchParams.get(\"code\");\r\n  // 로그인 과정을 위한 loginSlice 을 통해서 로그인시도\r\n  const dispatch = useDispatch();\r\n  const { moveToPath } = useCustomLogin();\r\n\r\n  // 인증코드로 Access Token 요청하기\r\n  useEffect(() => {\r\n    getAccessToken(authCode).then(accessToken => {\r\n      console.log(\"access Token\", accessToken);\r\n      // 개인 정보 호출\r\n      getMemberWithAccessToken(accessToken).then(memberInfo => {\r\n        console.log(\"-------------------\");\r\n        console.log(memberInfo);\r\n        // API 백엔드 서버로 로그인을 시도합니다.\r\n        dispatch(login(memberInfo));\r\n        // 소셜회원이 아니라면\r\n        if (memberInfo && !memberInfo.social) {\r\n          // 첫페이지로 이동\r\n          moveToPath(\"/login\");\r\n        } else {\r\n          // 정보 수정창으로 이동\r\n          moveToPath(\"/join/step_1\");\r\n        }\r\n      });\r\n    });\r\n  }, [authCode]);\r\n  return (\r\n    <div><h1>카카오 리다이렉트 페이지</h1>\r\n    <div>{authCode}</div></div>\r\n  )\r\n}\r\nexport default KakaoRedirectPage"],"names":["client_id","redirect_uri","authParam","URLSearchParams","response_type","getKakaoLoginLink","concat","toString","getAccessToken","async","params","grant_type","code","authCode","axios","post","headers","data","access_token","getMemberWithAccessToken","console","log","accessToken","get","SERVER_URL","useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","sessionStorage","getItem","doLogin","loginParam","successFn","failFn","errorFn","_ref","loginPostAsync","payload","doLogout","logout","moveToPath","path","pathname","replace","moveToLogin","_jsx","Navigate","to","userAuth","KakaoRedirectPage","uRLSearchParams","setURLSearchParams","useSearchParams","useEffect","then","memberInfo","login","social","_jsxs","children"],"sourceRoot":""}