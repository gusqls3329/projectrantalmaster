{"version":3,"file":"static/js/745.e35d0cdd.chunk.js","mappings":"4JAIA,MAAMA,EAAI,GAAAC,OAAMC,EAAAA,EAAU,QAEbC,EAAcC,UACzB,IACE,MAAMC,EAAG,GAAAJ,OAAMD,EAAI,eAAAC,OAAcK,GAGjC,aAFkBC,EAAAA,EAASC,IAAIH,EAGjC,CAAE,MAAOI,GACPC,QAAQC,IAAIF,EACd,GAGWG,EAAWR,MAAOS,EAAOC,KACpC,IACE,MAAMT,EAAG,GAAAJ,OAAMC,EAAAA,EAAU,mBAAAD,OAAkBY,EAAK,cAAAZ,OAAaa,GAG7D,GAAsB,aAFDP,EAAAA,EAASQ,KAAKV,IAExBW,OACT,OAAO,CAEX,CAAE,MAAOP,GAEP,MADAC,QAAQD,MAAMA,GACR,IAAIQ,MAAM,sBAClB,E,oHC1BK,MAAMC,EAAcC,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oHASxBC,EAAUJ,EAAAA,EAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iUAgBpBG,EAAiBN,EAAAA,EAAOC,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kSAQ3BK,EAAUR,EAAAA,EAAOS,IAAGC,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,mXAWpBQ,EAAWX,EAAAA,EAAOC,IAAGW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,2FAOrBU,EAAwBb,EAAAA,EAAOC,IAAGa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,wKAKlCY,EAAiBf,EAAAA,EAAOC,IAAGe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,sWAyB3Bc,GATcjB,EAAAA,EAAOC,IAAGiB,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,0HASPH,EAAAA,EAAOC,IAAGkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,SAE3BiB,EAAmBpB,EAAAA,EAAOC,IAAGoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,wYAS7BmB,EAAiBtB,EAAAA,EAAOC,IAAGsB,IAAAA,GAAApB,EAAAA,EAAAA,GAAA,6TAY3BqB,EAAwBxB,EAAAA,EAAOyB,EAACC,IAAAA,GAAAvB,EAAAA,EAAAA,GAAA,sEAMhCwB,EAAY3B,EAAAA,EAAO4B,MAAKC,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,mOAWxB2B,EAAuB9B,EAAAA,EAAOC,IAAG8B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,wFAMjC6B,EAAWhC,EAAAA,EAAOC,IAAGgC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,mKAUrB+B,EAAclC,EAAAA,EAAOyB,EAACU,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,wEAMtBiC,EAAcpC,EAAAA,EAAOC,IAAGoC,IAAAA,GAAAlC,EAAAA,EAAAA,GAAA,gLAWxBmC,EAAqBtC,EAAAA,EAAOC,IAAGsC,IAAAA,GAAApC,EAAAA,EAAAA,GAAA,0T,iCCzI5C,MAoDA,EApDoBqC,IAA0B,IAAzB,gBAAEC,GAAiBD,EACtC,MAAOE,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAEzCC,EAAAA,EAAAA,YAAU,MAER5D,iBACE,IACE,MAAME,EAAO,EACP2D,QAAiB9D,EAAAA,EAAAA,GAAYG,GACnCwD,EAAYG,EAASC,KACvB,CAAE,MAAOzD,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,CACF,CAEA0D,EAAe,GACd,IAEH,MAAOC,EAAiBC,IAAsBN,EAAAA,EAAAA,UAAS,MAOvD,OACEO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGX,EAASY,KAAIP,IACZQ,EAAAA,EAAAA,MAACjD,EAAc,CAEbkD,QAASA,KAAMC,OATrBP,EAD0BQ,EAUeX,QARzCN,EAAgBiB,GAFUA,KAUqB,EACzCC,SAAUV,GAAmBA,EAAgBW,KAAOb,EAAKa,GAAGP,SAAA,EAE5DE,EAAAA,EAAAA,MAACM,EAAAA,GAAgB,CAAAR,SAAA,EACfF,EAAAA,EAAAA,KAACW,EAAAA,GAAU,CAAAT,UACTF,EAAAA,EAAAA,KAAA,OAAKY,IAAG,QAAAjF,OAAUiE,EAAKiB,gBAAkBC,IAAI,qBAE/Cd,EAAAA,EAAAA,KAACjB,EAAAA,GAAW,CAAAmB,SAAEN,EAAKmB,oBAErBf,EAAAA,EAAAA,KAACtC,EAAqB,CAAAwC,UACpBF,EAAAA,EAAAA,KAACpC,EAAc,CAAAsC,SAAEN,EAAKoB,YAXnBpB,EAAKqB,UAeb,E,8BC3DP,MAAMC,EAAerE,EAAAA,EAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gSAWzBmE,EAAStE,EAAAA,EAAOuE,OAAMlE,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iZAatBqE,EAAgBxE,EAAAA,EAAOC,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+DAoChC,QA/BA,SAAcqC,GAAe,IAAd,QAAEiC,GAASjC,EACxB,MAAOkC,EAAQC,IAAa/B,EAAAA,EAAAA,WAAS,GAkBrC,OACEO,EAAAA,EAAAA,KAACkB,EAAY,CAAAhB,UACXE,EAAAA,EAAAA,MAACiB,EAAa,CAAAnB,SAAA,EACZF,EAAAA,EAAAA,KAACmB,EAAM,CAACM,GAAIC,EAAAA,GAAMC,GAAE,UAAatB,QAZbuB,KACxBxF,QAAQC,IAAI,+CAPZmF,GAAU,GACa,oBAAZF,GACTA,GAMgB,EAU8CpB,SAAC,8BAG7DF,EAAAA,EAAAA,KAACmB,EAAM,CAACd,QAVWwB,KACvBzF,QAAQC,IAAI,2DAAc,EASY6D,SAAC,8CAI3C,E,0BC3CA,MAuMA,GAvMyBb,IAA0B,IAAzB,gBAAES,GAAiBT,EAC3C,MAAOyC,EAAcC,IAAmBtC,EAAAA,EAAAA,UAAS,KAC1CuC,EAAcC,IAAmBxC,EAAAA,EAAAA,UAAS,KAC1CyC,EAAWC,IAAgB1C,EAAAA,EAAAA,WAAS,IACpC2C,EAAaC,IAAkB5C,EAAAA,EAAAA,UAAS,MACzC6C,GAAmBC,EAAAA,EAAAA,QAAO,MAC1BC,GAAaC,EAAAA,GAAAA,IAAU,UACvBC,EAAYF,EAAaA,EAAWG,YAAc,sBAwExDjD,EAAAA,EAAAA,YAAU,KArEY5D,WACpB,IAmBE,MAAM8G,EAAQ,IAAIC,GAAAA,EAAO,CACvBC,UAAW,6BACXC,eAAgB,CACdC,cAAc,UAADrH,OAAY+G,IAG3BO,MAAOC,IACL9G,QAAQC,IAAI6G,EAAI,EAElBC,eAAgB,IAChBC,kBAAmB,IACnBC,kBAAmB,MAErBjH,QAAQC,IAAI,2BAAQuG,GACpBA,EAAMU,aAAe,KACnBlH,QAAQC,IAAI,2BAAO,EAGrBuG,EAAMW,UAAY,KAChBnH,QAAQC,IAAI,gEAGZ,MAAMmH,GAA0B1D,EAAgB2D,SAAQ,gCAAA9H,OACpBmE,EAAgBvD,QAIpDqG,EAAMc,UAAUF,GAAyBG,IACvC,IACE,MAAMC,EAAgBC,KAAKC,MAAMH,EAAMI,MACvC3H,QAAQC,IAAIuH,GAEZ3B,GAAgB+B,GAAgB,IAAIA,EAAcJ,KAClDK,GACF,CAAE,MAAO9H,GACPC,QAAQD,MAAM,2DAAeA,EAC/B,IACA,EAIJyG,EAAMsB,WACN7B,EAAeO,EACjB,CAAE,MAAOzG,GACPC,QAAQD,MAAM,yFAA8BA,EAC9C,GAKAgI,GAGO,KACD/B,GACFA,EAAYgC,YACd,IAED,CAACtE,IAGJ,MAAMmE,EAAiBA,KACjB3B,EAAiB+B,UACnB/B,EAAiB+B,QAAQC,UACvBhC,EAAiB+B,QAAQE,aAC7B,EAgCIC,EAAcA,KAClBrC,GAAasC,IAAkBA,GAAc,EAG/C,OACEzE,EAAAA,EAAAA,KAAClC,EAAc,CAAAoC,SACZJ,GACCM,EAAAA,EAAAA,MAACnC,EAAgB,CAAAiC,SAAA,EACfE,EAAAA,EAAAA,MAACjC,EAAc,CAACuG,IAAKpC,EAAiBpC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,OACEY,IAAG,QAAAjF,OAAUmE,EAAgBe,gBAC7BC,IAAI,UACJ6D,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,aAAc,WAGlB3E,EAAAA,EAAAA,MAACzB,EAAoB,CAAAuB,SAAA,EACnBF,EAAAA,EAAAA,KAAC3C,EAAO,CACNgD,QAASmE,EACT5D,IAAI,wBACJE,IAAI,UAENd,EAAAA,EAAAA,KAACjB,EAAW,CAAAmB,SAAEJ,EAAgBiB,iBAC9Bf,EAAAA,EAAAA,KAAA,KAAAE,SAAIJ,EAAgBkB,YAEtBZ,EAAAA,EAAAA,MAACvB,EAAQ,CAAAqB,SAAA,CACNgC,IAAalC,EAAAA,EAAAA,KAACgF,EAAK,CAAC1D,QAASkD,KAC9BxE,EAAAA,EAAAA,KAAC7B,EAAc,CAAA+B,SACZ8B,EAAa7B,KAAI,CAAC8E,EAASC,KAC1BlF,EAAAA,EAAAA,KAACb,EAAkB,CAEjBwF,MAAO,CACLQ,eAAgBF,EAAQG,SACpB,WACA,cACJlF,UAEFF,EAAAA,EAAAA,KAACf,EAAW,CACV0F,MAAO,CACLU,gBAAiBJ,EAAQG,SACrB,UACA,UACJE,UAAWL,EAAQG,SAAW,WAAa,cAC3ClF,SAED+E,EAAQM,QAfNL,cAsBflF,EAAAA,EAAAA,KAACxB,EAAS,CACRgH,KAAK,OACLC,YAAY,0DACZC,MAAO5D,EACP6D,SAvFgBC,IACxB7D,EAAgB6D,EAAEC,OAAOH,MAAM,EAuFvBI,WAnFahK,UACrB,GAAc,UAAV8J,EAAEG,KAA2C,KAAxBjE,EAAakE,OAAe,CACnD,MAAMC,EAAa,CACjBV,KAAMzD,EACNsD,UAAU,GAaZnD,GAAgB+B,GAAgB,IAAIA,EAAciC,KAClDlE,EAAgB,IAChBkC,GACF,SAmEIjE,EAAAA,EAAAA,KAAC3B,EAAqB,CAAA6B,SAAC,0GAIV,ECvLrB,GAxBiBgG,KACf,MAAOpG,EAAiBC,IAAsBN,EAAAA,EAAAA,UAAS,MAMvD,OACEO,EAAAA,EAAAA,KAACmG,EAAAA,EAAM,CAAAjG,UACLE,EAAAA,EAAAA,MAACxD,EAAW,CAAAsD,SAAA,EACVE,EAAAA,EAAAA,MAACnD,EAAO,CAAAiD,SAAA,EACNE,EAAAA,EAAAA,MAAC5C,EAAQ,CAAA0C,SAAA,CAAC,8BACFF,EAAAA,EAAAA,KAAA,OAAKY,IAAI,0BAA0BE,IAAI,eAE/Cd,EAAAA,EAAAA,KAACoG,EAAW,CAAC9G,gBAXOiB,IAC1BR,EAAmBQ,EAAQ,QAYvBP,EAAAA,EAAAA,KAAC/C,EAAO,CAAAiD,UACNF,EAAAA,EAAAA,KAACqG,GAAgB,CAACvG,gBAAiBA,UAGhC,C,kCC3BN,MAAMwG,EAAS,CAEpBC,MAAO,CACLC,QAAS,UACTC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,KAAM,W,iWCLH,MAAMC,EAAelK,EAAAA,EAAOuE,OAAMrE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uMAe5BgK,EAAUnK,EAAAA,EAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wNAmBpBiK,GALiBpK,EAAAA,EAAOC,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qEAKrBH,EAAAA,EAAOC,IAAGS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,gaAOAsJ,EAAAA,EAAOC,MAAMC,UAU7BU,EAASrK,EAAAA,EAAOC,IAAGW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,8SAgBnBmK,EAAQtK,EAAAA,EAAOS,IAAGK,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,oHAQlBoK,EAAgBvK,EAAAA,EAAOC,IAAGe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,uDAK1BqK,EAAQxK,EAAAA,EAAOyK,GAAEvJ,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,qGAQjBuK,EAAW1K,EAAAA,EAAOC,IAAGkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,6HASrBwK,EAAW3K,EAAAA,EAAOC,IAAGoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,+DAKrByK,EAAa5K,EAAAA,EAAOC,IAAGsB,IAAAA,GAAApB,EAAAA,EAAAA,GAAA,oIAavB0K,GAAa7K,EAAAA,EAAAA,GAAO4K,EAAP5K,CAAkB0B,IAAAA,GAAAvB,EAAAA,EAAAA,GAAA,gDAK/B2K,EAAa9K,EAAAA,EAAOC,IAAG4B,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,kEACPsJ,EAAAA,EAAOC,MAAMC,SAI7BoB,EAAU/K,EAAAA,EAAOC,IAAG8B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,6VAetB6K,GAAUA,EAAMC,QAAU,OAAS,SACxBD,GAAUA,EAAMC,QAAU,UAAY,YAO/CC,GAAalL,EAAAA,EAAAA,GAAO+K,EAAP/K,CAAeiC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,+DAM5BgL,EAAYnL,EAAAA,EAAOC,IAAGkC,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,+YAuBtBiL,GAASpL,EAAAA,EAAAA,GAAOmL,EAAPnL,CAAiBqC,IAAAA,GAAAlC,EAAAA,EAAAA,GAAA,qDAO1B0D,EAAmB7D,EAAAA,EAAOC,IAAGsC,IAAAA,GAAApC,EAAAA,EAAAA,GAAA,6EAQ7BkL,GAAyBrL,EAAAA,EAAOC,IAAGqL,IAAAA,GAAAnL,EAAAA,EAAAA,GAAA,uGAQnC2D,GAAa9D,EAAAA,EAAOC,IAAGsL,IAAAA,GAAApL,EAAAA,EAAAA,GAAA,4LAcvB+B,GAAclC,EAAAA,EAAOC,IAAGuL,IAAAA,GAAArL,EAAAA,EAAAA,GAAA,+LAYxBsL,GAAkBzL,EAAAA,EAAOC,IAAGyL,IAAAA,GAAAvL,EAAAA,EAAAA,GAAA,wLAW5BwL,GAAgB3L,EAAAA,EAAOC,IAAG2L,IAAAA,GAAAzL,EAAAA,EAAAA,GAAA,2JAS1B0L,GAAoB7L,EAAAA,EAAOC,IAAG6L,IAAAA,GAAA3L,EAAAA,EAAAA,GAAA,sFAiB9B4L,IAVc/L,EAAAA,EAAOC,IAAG+L,IAAAA,GAAA7L,EAAAA,EAAAA,GAAA,4HAUZH,EAAAA,EAAOuE,OAAM0H,IAAAA,GAAA9L,EAAAA,EAAAA,GAAA,mVA2BzB+L,KANYlM,EAAAA,EAAAA,GAAO+L,GAAP/L,CAAiBmM,IAAAA,GAAAhM,EAAAA,EAAAA,GAAA,uEAMhBH,EAAAA,EAAOC,IAAGmM,IAAAA,GAAAjM,EAAAA,EAAAA,GAAA,2KAYXH,EAAAA,EAAOC,IAAGoM,IAAAA,GAAAlM,EAAAA,EAAAA,GAAA,kVAgBTH,EAAAA,EAAOC,IAAGqM,IAAAA,GAAAnM,EAAAA,EAAAA,GAAA,gTAcTH,EAAAA,EAAOC,IAAGsM,IAAAA,GAAApM,EAAAA,EAAAA,GAAA,qJ","sources":["api/chat/chat_api.js","styles/chat/ChatStyles.js","components/chat/ChatProfile.js","components/chat/Modal.js","components/chat/ChatBoxComponent.js","pages/chat/ChatPage.js","styles/CommonStyles.js","styles/details/DetailsComponentStyles.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { SERVER_URL } from \"../config\";\r\nimport { jwtAxios } from \"../../util/jwtUtil\";\r\n\r\nconst path = `${SERVER_URL}/api`;\r\n\r\nexport const getChatList = async page => {\r\n  try {\r\n    const url = `${path}/chat?page=${page}`;\r\n    const res = await jwtAxios.get(url);\r\n\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const postChat = async (iuser, iproduct) => {\r\n  try {\r\n    const url = `${SERVER_URL}/api/chat/room/${iuser}?iproduct=${iproduct}`;\r\n    const result = await jwtAxios.post(url);\r\n\r\n    if (result.status === 200) {\r\n      return 1;\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw new Error(\"Failed to post chat\");\r\n  }\r\n};\r\n\r\n// export const getUserInfo = async userId => {\r\n//   try {\r\n//     const url = `${path}/user?id=${userId}`;\r\n//     const res = await jwtAxios.get(url);\r\n//     return res.data;\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//     throw new Error(\"Failed to get user info\");\r\n//   }\r\n// };\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const PageWrapper = styled.div`\r\n  max-width: 1280px;\r\n  height: 630px;\r\n  margin: 0 auto;\r\n\r\n  display: flex;\r\n  /* margin-top: 20px; */\r\n`;\r\n\r\nexport const ChatBox = styled.div`\r\n  width: 630px;\r\n\r\n  height: auto;\r\n  max-height: 627px;\r\n  flex-shrink: 0;\r\n  padding-left: 10px;\r\n  padding-right: 5px;\r\n  padding-top: 15px;\r\n  margin-right: 20px;\r\n  border: 1px solid #777;\r\n  overflow: hidden; /* 넘치는 내용 숨김 */\r\n  overflow-y: auto;\r\n  position: relative;\r\n`;\r\n\r\nexport const ChatProfileBox = styled.div`\r\n  width: 600px;\r\n  height: 90px;\r\n  flex-shrink: 0;\r\n  justify-content: flex-end;\r\n  cursor: pointer; /* 클릭 가능하도록 커서 스타일 지정 */\r\n  pointer-events: auto; /* 클릭 이벤트 활성화 */\r\n`;\r\nexport const ChatBtn = styled.img`\r\n  font-size: 14px;\r\n  position: absolute;\r\n  cursor: pointer; /* 클릭 가능하도록 커서 스타일 지정 */\r\n  pointer-events: auto; /* 클릭 이벤트 활성화 */\r\n  right: 0; /* 오른쪽 끝으로 이동 */\r\n  width: 5%;\r\n  top: 10px;\r\n  margin-right: 20px;\r\n`;\r\n\r\nexport const ChatList = styled.div`\r\n  color: #000;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n  margin-bottom: 45px;\r\n`;\r\n\r\nexport const ProductContentWrapper = styled.div`\r\n  display: flex;\r\n  align-items: baseline; /* 제품명과 날짜를 수평 정렬하기 위해 추가 */\r\n`;\r\n\r\nexport const ProductContent = styled.div`\r\n  width: 380px;\r\n\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  color: #777;\r\n  font-size: 13px;\r\n  font-weight: 400;\r\n  margin-left: 95px;\r\n  margin-top: 10px;\r\n  line-height: 15px; /* Match with height for accurate calculation */\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 3; /* Show up to 3 lines */\r\n  -webkit-box-orient: vertical;\r\n`;\r\n\r\nexport const CurrentDate = styled.div`\r\n  width: 80px;\r\n  height: 15px;\r\n  color: #777;\r\n  font-size: 13px;\r\n  font-weight: 400;\r\n  margin-left: 40px;\r\n`;\r\n\r\nexport const ChatBoxWrapper = styled.div``;\r\n\r\nexport const ChatBoxContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end; // 새로운 메시지가 항상 하단에 위치하도록 설정합니다.\r\n\r\n  flex: 1;\r\n  overflow-y: auto; // 세로 스크롤이 필요할 경우 스크롤이 표시됩니다.\r\n`;\r\n\r\nexport const ChatBoxContent = styled.div`\r\n  /* width: 600px; */\r\n  max-width: 100%;\r\n  max-height: 550px;\r\n  min-height: 550px;\r\n  height: 550px;\r\n  box-sizing: border-box;\r\n  background-color: #fff;\r\n  z-index: 5;\r\n  min-height: 0; /* 컨테이너의 최소 높이를 0으로 설정합니다. */\r\n`;\r\n\r\nexport const NoChatSelectedMessage = styled.p`\r\n  font-size: 16px;\r\n  text-align: center;\r\n  width: 600px;\r\n`;\r\n\r\nexport const ChatInput = styled.input`\r\n  width: 600px;\r\n  max-width: 100%; /* 최대 너비 설정 */\r\n  height: 50px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n  font-size: 16px;\r\n  background: #f2f2ff;\r\n  padding-left: 10px;\r\n`;\r\n\r\nexport const ProfileInfoContainer = styled.div`\r\n  display: inline-block;\r\n  margin-left: 10px;\r\n  /* margin-right: 200px; */\r\n`;\r\n\r\nexport const ChatText = styled.div`\r\n  max-height: 450px;\r\n  min-height: 450px;\r\n  height: 450px;\r\n  margin-bottom: 5px;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  padding-right: 10px;\r\n`;\r\n\r\nexport const ProfileName = styled.p`\r\n  font-size: 16px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n`;\r\n\r\nexport const ChatMessage = styled.div`\r\n  background-color: #e5e5fe;\r\n  display: inline-block;\r\n  border-radius: 10px;\r\n\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-size: 13px;\r\n  text-align: right;\r\n`;\r\n\r\nexport const ChatMessageWrapper = styled.div`\r\n  clear: both; /* 새로운 줄로 메시지를 배치합니다. */\r\n  overflow: hidden; /* 부모 요소의 높이를 계산하기 위해 사용됩니다. */\r\n  text-align: right;\r\n  padding-right: 5px;\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  ProfileContainer,\r\n  ProfileImg,\r\n  ProfileName,\r\n} from \"../../styles/details/DetailsComponentStyles\";\r\n\r\nimport {\r\n  ProductContent,\r\n  CurrentDate,\r\n  ProductContentWrapper,\r\n  ChatProfileBox,\r\n} from \"../../styles/chat/ChatStyles\";\r\n\r\n// ChatProfile 컴포넌트에서 API를 호출하기 위한 함수를 import\r\nimport { getChatList } from \"../../api/chat/chat_api\";\r\n\r\nconst ChatProfile = ({ onProfileSelect }) => {\r\n  const [chatList, setChatList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // 페이지 로드 시 채팅 목록을 가져오도록 함\r\n    async function fetchChatList() {\r\n      try {\r\n        const page = 1; // 가져올 페이지 번호\r\n        const response = await getChatList(page);\r\n        setChatList(response.data); // API 응답에서 데이터를 가져와 상태 업데이트\r\n      } catch (error) {\r\n        console.error(\"Error fetching chat list:\", error);\r\n      }\r\n    }\r\n\r\n    fetchChatList(); // 함수 호출\r\n  }, []); // useEffect를 한 번만 호출하기 위해 빈 배열을 전달\r\n\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n\r\n  const handleProfileSelect = profile => {\r\n    setSelectedProfile(profile);\r\n    onProfileSelect(profile); // Notify the parent component about the selected profile\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {chatList.map(data => (\r\n        <ChatProfileBox\r\n          key={data.ichat}\r\n          onClick={() => handleProfileSelect(data)}\r\n          selected={selectedProfile && selectedProfile.id === data.id}\r\n        >\r\n          <ProfileContainer>\r\n            <ProfileImg>\r\n              <img src={`/pic/${data.otherPersonPic}`} alt=\"Profile Image\" />\r\n            </ProfileImg>\r\n            <ProfileName>{data.otherPersonNm}</ProfileName>\r\n          </ProfileContainer>\r\n          <ProductContentWrapper>\r\n            <ProductContent>{data.title}</ProductContent>\r\n          </ProductContentWrapper>\r\n        </ChatProfileBox>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nChatProfile.propTypes = {\r\n  onProfileSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ChatProfile;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"@emotion/styled\"; // 이모션에서 styled를 불러옵니다.\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ModalContent = styled.div`\r\n  background-color: #e5e5fe;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n  position: relative; /* 부모 요소로부터 상대적으로 위치 설정 */\r\n  height: 60px;\r\n  font-size: 16px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  cursor: pointer;\r\n  background: none;\r\n  border: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: inherit;\r\n  color: inherit;\r\n  display: flex;\r\n  align-items: center; /* 버튼 내의 요소를 세로 중앙에 정렬 */\r\n  justify-content: center; /* 버튼 내의 요소를 가로 중앙에 정렬 */\r\n`;\r\n\r\nconst ActionButtons = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nfunction Modal({ onClose }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleCloseModal = () => {\r\n    setIsOpen(false);\r\n    if (typeof onClose === \"function\") {\r\n      onClose(); // 모달 닫기 함수 호출\r\n    }\r\n  };\r\n\r\n  const handleReportClick = () => {\r\n    console.log(\"신고하기 클릭됨\");\r\n    handleCloseModal();\r\n  };\r\n\r\n  const handleLeaveClick = () => {\r\n    console.log(\"채팅방 나가기 클릭됨\");\r\n  };\r\n\r\n  return (\r\n    <ModalContent>\r\n      <ActionButtons>\r\n        <Button as={Link} to={`/report`} onClick={handleReportClick}>\r\n          신고하기\r\n        </Button>\r\n        <Button onClick={handleLeaveClick}>채팅방 나가기</Button>\r\n      </ActionButtons>\r\n    </ModalContent>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  ChatBoxContainer,\r\n  ChatBoxWrapper,\r\n  ChatBoxContent,\r\n  ChatInput,\r\n  ProfileInfoContainer,\r\n  NoChatSelectedMessage,\r\n  ChatText,\r\n  ProfileName,\r\n  ChatMessage,\r\n  ChatMessageWrapper,\r\n  ChatBtn,\r\n} from \"../../styles/chat/ChatStyles\";\r\nimport Modal from \"./Modal\";\r\nimport { postChat } from \"../../api/chat/chat_api\"; // 채팅 생성 API import\r\n\r\nimport { getCookie } from \"../../util/cookieUtil\"; // 쿠키 유틸 함수 import\r\nimport { Client } from \"@stomp/stompjs\"; // STOMP 클라이언트 추가\r\nconst ChatBoxComponent = ({ selectedProfile }) => {\r\n  const [inputMessage, setInputMessage] = useState(\"\"); // 입력 메시지를 저장하는 상태\r\n  const [chatMessages, setChatMessages] = useState([]); // 채팅 메시지를 저장하는 상태\r\n  const [modalOpen, setModalOpen] = useState(false); // 모달 열림 상태를 관리하는 상태\r\n  const [stompClient, setStompClient] = useState(null); // STOMP5 클라이언트 상태 추가\r\n  const chatContainerRef = useRef(null); // 채팅 스크롤을 위한 ref 추가\r\n  const memberInfo = getCookie(\"member\");\r\n  const authToken = memberInfo ? memberInfo.accessToken : \"your_default_token\";\r\n\r\n  // WebSocket 연결 함수 정의\r\n  const connectToChat = async () => {\r\n    try {\r\n      // const client = new Client({\r\n      //   brokerURL: \"ws://localhost:8080/ws\",\r\n      //   connectHeaders: {\r\n      //     Authorization: `Bearer ${authToken}`, // AccessToken 헤더에 추가\r\n      //   },\r\n      //   onConnect: () => {\r\n      //     client.subscribe(\"/topic/test01\", message =>\r\n      //       console.log(`Received: ${message.body}`),\r\n      //     );\r\n      //     client.publish({\r\n      //       destination: \"/topic/test01\",\r\n      //       body: \"First Message\",\r\n      //     });\r\n      //   },\r\n      // });\r\n\r\n      // client.activate();\r\n      // STOMP 클라이언트 생성\r\n      const stomp = new Client({\r\n        brokerURL: \"ws://192.168.0.144:5226/ws\", // WebSocket 연결 주소\r\n        connectHeaders: {\r\n          Authorization: `Bearer ${authToken}`, // AccessToken 헤더에 추가\r\n        },\r\n\r\n        debug: str => {\r\n          console.log(str);\r\n        },\r\n        reconnectDelay: 200000, // 자동 재연결 딜레이\r\n        heartbeatIncoming: 40000, // Heartbeat 수신 주기\r\n        heartbeatOutgoing: 40000, // Heartbeat 발신 주기\r\n      });\r\n      console.log(\"연결확인\", stomp);\r\n      stomp.onStompError = () => {\r\n        console.log(\"연결실패\");\r\n      };\r\n      // STOMP 클라이언트 설정 및 연결\r\n      stomp.onConnect = () => {\r\n        console.log(\"WebSocket 연결이 열렸습니다.\");\r\n\r\n        // 구독 대상 설정\r\n        const subscriptionDestination = selectedProfile.isSeller\r\n          ? `/exchange/chat.exchange/room.${selectedProfile.iuser}`\r\n          : `/exchange/chat.exchange/room.${selectedProfile.iuser}`;\r\n\r\n        // 메시지 수신 처리\r\n        stomp.subscribe(subscriptionDestination, frame => {\r\n          try {\r\n            const parsedMessage = JSON.parse(frame.body);\r\n            console.log(parsedMessage);\r\n            // 채팅 메시지 업데이트\r\n            setChatMessages(prevMessages => [...prevMessages, parsedMessage]);\r\n            scrollToBottom();\r\n          } catch (error) {\r\n            console.error(\"오류가 발생했습니다:\", error);\r\n          }\r\n        });\r\n      };\r\n\r\n      // STOMP 클라이언트 설정 및 연결\r\n      stomp.activate();\r\n      setStompClient(stomp);\r\n    } catch (error) {\r\n      console.error(\"WebSocket 연결 중 오류가 발생했습니다:\", error);\r\n    }\r\n  };\r\n\r\n  // useEffect를 사용하여 컴포넌트가 마운트될 때 WebSocket 연결\r\n  useEffect(() => {\r\n    connectToChat();\r\n\r\n    // 컴포넌트 언마운트 시 WebSocket 연결 해제\r\n    return () => {\r\n      if (stompClient) {\r\n        stompClient.deactivate();\r\n      }\r\n    };\r\n  }, [selectedProfile]); // 선택된 프로필이 변경될 때마다 useEffect 다시 실행\r\n\r\n  // 스크롤을 맨 아래로 이동하는 함수\r\n  const scrollToBottom = () => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollTop =\r\n        chatContainerRef.current.scrollHeight;\r\n    }\r\n  };\r\n\r\n  // 입력 메시지 변경 핸들러\r\n  const handleInputChange = e => {\r\n    setInputMessage(e.target.value);\r\n  };\r\n\r\n  // 엔터 키 입력 핸들러\r\n  const handleKeyPress = async e => {\r\n    if (e.key === \"Enter\" && inputMessage.trim() !== \"\") {\r\n      const newMessage = {\r\n        text: inputMessage,\r\n        isSender: true,\r\n      };\r\n\r\n      // Chat API 호출\r\n      // try {\r\n      //   await jwtAxios.post(`chat.send.${selectedProfile.ichatRoom}`, {\r\n      //     message: inputMessage,\r\n      //   });\r\n      //   console.log(\"채팅 메시지 전송 성공\");\r\n      // } catch (error) {\r\n      //   console.error(\"채팅 메시지 전송 실패:\", error);\r\n      // }\r\n\r\n      setChatMessages(prevMessages => [...prevMessages, newMessage]);\r\n      setInputMessage(\"\"); // 입력 메시지 초기화\r\n      scrollToBottom();\r\n    }\r\n  };\r\n  // 모달 열기/닫기 토글 핸들러\r\n  const toggleModal = () => {\r\n    setModalOpen(prevModalOpen => !prevModalOpen);\r\n  };\r\n\r\n  return (\r\n    <ChatBoxWrapper>\r\n      {selectedProfile ? (\r\n        <ChatBoxContainer>\r\n          <ChatBoxContent ref={chatContainerRef}>\r\n            <img\r\n              src={`/pic/${selectedProfile.otherPersonPic}`}\r\n              alt=\"Profile\"\r\n              style={{\r\n                width: \"60px\",\r\n                height: \"60px\",\r\n                borderRadius: \"50%\",\r\n                marginBottom: \"20px\",\r\n              }}\r\n            />\r\n            <ProfileInfoContainer>\r\n              <ChatBtn\r\n                onClick={toggleModal}\r\n                src=\"/images/chat/more.png\"\r\n                alt=\"more\"\r\n              />\r\n              <ProfileName>{selectedProfile.otherPersonNm}</ProfileName>\r\n              <p>{selectedProfile.title}</p>\r\n            </ProfileInfoContainer>\r\n            <ChatText>\r\n              {modalOpen && <Modal onClose={toggleModal} />}\r\n              <ChatBoxContent>\r\n                {chatMessages.map((message, index) => (\r\n                  <ChatMessageWrapper\r\n                    key={index}\r\n                    style={{\r\n                      justifyContent: message.isSender\r\n                        ? \"flex-end\"\r\n                        : \"flex-start\",\r\n                    }}\r\n                  >\r\n                    <ChatMessage\r\n                      style={{\r\n                        backgroundColor: message.isSender\r\n                          ? \"#a3d8f4\"\r\n                          : \"#f1f0f0\",\r\n                        alignSelf: message.isSender ? \"flex-end\" : \"flex-start\",\r\n                      }}\r\n                    >\r\n                      {message.text}\r\n                    </ChatMessage>\r\n                  </ChatMessageWrapper>\r\n                ))}\r\n              </ChatBoxContent>\r\n            </ChatText>\r\n          </ChatBoxContent>\r\n          <ChatInput\r\n            type=\"text\"\r\n            placeholder=\"메시지를 입력하세요\"\r\n            value={inputMessage} // 입력값 바인딩\r\n            onChange={handleInputChange} // 입력값 변경 핸들러\r\n            onKeyPress={handleKeyPress} // 엔터 키 입력 핸들러\r\n          />\r\n        </ChatBoxContainer>\r\n      ) : (\r\n        <NoChatSelectedMessage>\r\n          프로필을 선택하여 채팅을 시작하세요.\r\n        </NoChatSelectedMessage>\r\n      )}\r\n    </ChatBoxWrapper>\r\n  );\r\n};\r\n\r\nexport default ChatBoxComponent;\r\n","import React, { useState } from \"react\";\r\nimport { PageWrapper, ChatBox, ChatList } from \"../../styles/chat/ChatStyles\";\r\nimport ChatProfile from \"../../components/chat/ChatProfile\";\r\n\r\nimport Layout from \"../../layouts/Layout\";\r\nimport ChatBoxComponent from \"../../components/chat/ChatBoxComponent\";\r\n\r\nconst ChatPage = () => {\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n\r\n  const handleProfileSelect = profile => {\r\n    setSelectedProfile(profile);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <PageWrapper>\r\n        <ChatBox>\r\n          <ChatList>\r\n            채팅 목록 <img src=\"/images/chat/Vector.svg\" alt=\"Vector\" />\r\n          </ChatList>\r\n          <ChatProfile onProfileSelect={handleProfileSelect} />\r\n        </ChatBox>\r\n        <ChatBox>\r\n          <ChatBoxComponent selectedProfile={selectedProfile} />\r\n        </ChatBox>\r\n      </PageWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","export const Common = {\r\n  // 숫자가 높을수록 밝은 색\r\n  color: {\r\n    primary: \"#2C39B5\",\r\n    p100: \"#000000\",\r\n    p200: \"#4B4B4B\",\r\n    p300: \"#777777\",\r\n    p400: \"#E4E7FF\",\r\n    p500: \"#F2F2FF\",\r\n    p600: \"#FFFFFF\",\r\n  },\r\n};\r\n","import styled from \"@emotion/styled\";\r\nimport { Common } from \"../CommonStyles\";\r\n\r\n// Like styles\r\nexport const StyledButton = styled.button`\r\n  display: block;\r\n  margin-top: 50px;\r\n  right: 12px;\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n\r\n  img {\r\n    width: 40px !important;\r\n    height: 35px !important;\r\n  }\r\n`;\r\n\r\n// Pay styles\r\nexport const Overlay = styled.div`\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  z-index: 100;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nexport const ModalContainer = styled.div`\r\n  width: 100%;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 1);\r\n`;\r\n\r\nexport const Box = styled.div`\r\n  padding: 22px;\r\n  width: 470px;\r\n  height: 240px;\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  border-bottom: 1px solid ${Common.color.primary};\r\n  /* 모달이 상단에 위치하도록 수정 */\r\n  position: fixed;\r\n  top: 200px; /* 원하는 높이로 수정 */\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 100;\r\n  background-color: #fff;\r\n`;\r\n\r\nexport const SubBox = styled.div`\r\n  padding: 20px;\r\n  width: 470px;\r\n  max-height: 380px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 5px;\r\n\r\n  position: fixed;\r\n  top: 440px; /* 원하는 높이로 수정 */\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 100;\r\n  background-color: #fff;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 190px;\r\n  height: 190px;\r\n  margin-right: 25px;\r\n  margin-bottom: 40px;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const TextContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n  width: 202px;\r\n  height: 37px;\r\n  color: #000;\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const Duration = styled.div`\r\n  width: 205px;\r\n  height: 20px;\r\n  color: #000;\r\n  font-size: 13px;\r\n  font-weight: 400;\r\n  margin-bottom: 40px;\r\n`;\r\n\r\nexport const PriceRow = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const PriceLabel = styled.div`\r\n  width: auto;\r\n  height: 14px;\r\n\r\n  color: #000;\r\n\r\n  font-size: 13px;\r\n\r\n  font-weight: 400;\r\n\r\n  margin-bottom: 18px;\r\n`;\r\n\r\nexport const PriceValue = styled(PriceLabel)`\r\n  width: 75px;\r\n  text-align: right;\r\n`;\r\n\r\nexport const TotalPrice = styled.div`\r\n  border-bottom: 1px solid ${Common.color.primary};\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const BtnCard = styled.div`\r\n  width: 430px;\r\n  height: 70px;\r\n  flex-shrink: 0;\r\n  border-radius: 5px;\r\n\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #000;\r\n  font-size: 16px;\r\n  display: flex;\r\n\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n  color: ${props => (props.clicked ? \"#fff\" : \"#000\")};\r\n  background-color: ${props => (props.clicked ? \"#2c39b5\" : \"#f2f2ff\")};\r\n\r\n  &:hover {\r\n    background: #2c39b5;\r\n    color: #f2f2ff;\r\n  }\r\n`;\r\nexport const BtnPayList = styled(BtnCard)`\r\n  width: 140px;\r\n  height: 70px;\r\n  flex-shrink: 0;\r\n`;\r\n\r\nexport const BtnCancel = styled.div`\r\n  width: 200px;\r\n  height: 46px;\r\n  flex-shrink: 0;\r\n  border-radius: 10px;\r\n  border: 1px solid #2c39b5;\r\n  color: #2c39b5;\r\n  margin-top: 45px;\r\n  font-family: Inter;\r\n  font-size: 16px;\r\n\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: #2c39b5;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nexport const BtnPay = styled(BtnCancel)`\r\n  color: #2c39b5;\r\n\r\n  margin-left: 20px;\r\n`;\r\n\r\n//ProFile styles\r\nexport const ProfileContainer = styled.div`\r\n  width: 100%;\r\n  height: 20px;\r\n  display: flex;\r\n\r\n  gap: 1rem;\r\n`;\r\n\r\nexport const SellerProfileContainer = styled.div`\r\n  width: 100%;\r\n  height: 50px;\r\n  position: absolute;\r\n  margin-left: 500px;\r\n  gap: 1rem;\r\n`;\r\n\r\nexport const ProfileImg = styled.div`\r\n  width: 70px;\r\n  height: 70px;\r\n  box-sizing: border-box;\r\n  border-radius: 45px;\r\n  overflow: hidden;\r\n  font-size: 16px;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const ProfileName = styled.div`\r\n  width: 70px;\r\n  height: 20px;\r\n  color: #000;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  display: flex;\r\n  justify-content: center; /* 가로 중앙 정렬 */\r\n`;\r\n\r\n//Review styles\r\n\r\nexport const ReviewFormStyle = styled.div`\r\n  width: 1260px;\r\n  height: 380px;\r\n  flex-shrink: 0;\r\n  border-radius: 10px;\r\n  border: 1px solid #2c39b5;\r\n  padding-left: 20px;\r\n  padding-top: 15px;\r\n  font-size: 16px;\r\n`;\r\n\r\nexport const ReviewProfile = styled.div`\r\n  margin-top: 25px;\r\n\r\n  width: 1220px;\r\n  height: auto;\r\n  flex-shrink: 0;\r\n  position: relative; /* 상대 위치 설정 */\r\n`;\r\n\r\nexport const ReviewProfileLine = styled.div`\r\n  width: 100%;\r\n\r\n  border-bottom: 1px solid #2c39b5;\r\n  margin-top: 25px;\r\n`;\r\n\r\nexport const CurrentDate = styled.div`\r\n  width: 80px;\r\n  height: 15px;\r\n  color: #777;\r\n  font-size: 13px;\r\n  font-weight: 400;\r\n\r\n  margin-left: auto;\r\n`;\r\n\r\nexport const BtnStyles = styled.button`\r\n  display: flex;\r\n  width: 103px;\r\n  height: 36px;\r\n\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  margin: auto;\r\n  margin-top: 10px;\r\n\r\n  background-color: #fff;\r\n  border-radius: 50px;\r\n  border: 1px solid #2c39b5;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: #2c39b5;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nexport const BtnReivew = styled(BtnStyles)`\r\n  width: 79px;\r\n  margin-right: 60px;\r\n  margin-top: -20px;\r\n`;\r\n\r\nexport const ReviewText = styled.div`\r\n  width: 550px;\r\n  height: auto;\r\n  color: #777;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  margin-left: 92px;\r\n  margin-top: 10px;\r\n  white-space: pre-line;\r\n`;\r\n\r\n// ReportPost styles\r\nexport const ReportBox = styled.div`\r\n  padding: 22px;\r\n  width: 600px;\r\n  height: 0 auto;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n  padding: 60px;\r\n\r\n  position: fixed;\r\n  top: 200px; /* 원하는 높이로 수정 */\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 99;\r\n  background-color: #fff;\r\n`;\r\nexport const ReportText = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  -webkit-box-pack: justify;\r\n  justify-content: space-between;\r\n  color: rgb(102, 102, 102);\r\n  height: 60px;\r\n  font-size: 16px;\r\n  padding-left: 20px px;\r\n  border-bottom: 1px solid rgb(150, 150, 150);\r\n`;\r\n\r\nexport const ReportTitle = styled.div`\r\n  letter-spacing: 5.2px;\r\n  font-size: 26px;\r\n  padding-bottom: 30px;\r\n  border-bottom: 1px solid rgb(33, 33, 33);\r\n  margin-bottom: 45px;\r\n`;\r\n"],"names":["path","concat","SERVER_URL","getChatList","async","url","page","jwtAxios","get","error","console","log","postChat","iuser","iproduct","post","status","Error","PageWrapper","styled","div","_templateObject","_taggedTemplateLiteral","ChatBox","_templateObject2","ChatProfileBox","_templateObject3","ChatBtn","img","_templateObject4","ChatList","_templateObject5","ProductContentWrapper","_templateObject6","ProductContent","_templateObject7","ChatBoxWrapper","_templateObject8","_templateObject9","ChatBoxContainer","_templateObject10","ChatBoxContent","_templateObject11","NoChatSelectedMessage","p","_templateObject12","ChatInput","input","_templateObject13","ProfileInfoContainer","_templateObject14","ChatText","_templateObject15","ProfileName","_templateObject16","ChatMessage","_templateObject17","ChatMessageWrapper","_templateObject18","_ref","onProfileSelect","chatList","setChatList","useState","useEffect","response","data","fetchChatList","selectedProfile","setSelectedProfile","_jsx","_Fragment","children","map","_jsxs","onClick","handleProfileSelect","profile","selected","id","ProfileContainer","ProfileImg","src","otherPersonPic","alt","otherPersonNm","title","ichat","ModalContent","Button","button","ActionButtons","onClose","isOpen","setIsOpen","as","Link","to","handleReportClick","handleLeaveClick","inputMessage","setInputMessage","chatMessages","setChatMessages","modalOpen","setModalOpen","stompClient","setStompClient","chatContainerRef","useRef","memberInfo","getCookie","authToken","accessToken","stomp","Client","brokerURL","connectHeaders","Authorization","debug","str","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onStompError","onConnect","subscriptionDestination","isSeller","subscribe","frame","parsedMessage","JSON","parse","body","prevMessages","scrollToBottom","activate","connectToChat","deactivate","current","scrollTop","scrollHeight","toggleModal","prevModalOpen","ref","style","width","height","borderRadius","marginBottom","Modal","message","index","justifyContent","isSender","backgroundColor","alignSelf","text","type","placeholder","value","onChange","e","target","onKeyPress","key","trim","newMessage","ChatPage","Layout","ChatProfile","ChatBoxComponent","Common","color","primary","p100","p200","p300","p400","p500","p600","StyledButton","Overlay","Box","SubBox","Image","TextContainer","Title","h3","Duration","PriceRow","PriceLabel","PriceValue","TotalPrice","BtnCard","props","clicked","BtnPayList","BtnCancel","BtnPay","SellerProfileContainer","_templateObject19","_templateObject20","_templateObject21","ReviewFormStyle","_templateObject22","ReviewProfile","_templateObject23","ReviewProfileLine","_templateObject24","BtnStyles","_templateObject25","_templateObject26","ReviewText","_templateObject27","_templateObject28","_templateObject29","_templateObject30","_templateObject31"],"sourceRoot":""}